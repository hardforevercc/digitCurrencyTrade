<?xml version="1.0" encoding="UTF-8"?>
<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->

<!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出-->

<!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数-->

<configuration status="WARN" monitorInterval="30">

    <Properties>
        <Property name="LOG_PATTERN">
            [%p][%d{yyyy-MM-dd HH:mm:ss:SSS}][%X{X-B3-TraceId}][%X{X-B3-SpanId}][%X{X-B3-ParentSpanId}][%X{X-Span-Export}][%X{projNo}][%X{projName}][%X{serverName}][%X{tranName}][%X{busId}][%F(%L)][ %t:%r ] %m%n		</Property>
        <Property name="ELK_LOG_PATTERN">
            %p~|~%d{yyyy-MM-dd HH:mm:ss:SSS}~|~%X{X-B3-TraceId}~|~%X{X-B3-SpanId}~|~%X{X-B3-ParentSpanId}~|~%X{X-Span-Export}~|~%X{projNo}~|~%X{projName}~|~%X{serverName}~|~%X{tranName}~|~%X{busId}~|~%F(%L)~|~%m~|~%n
        </Property>
    </Properties>

    <!--先定义所有的appender-->

    <appenders>

        <!--这个输出控制台的配置-->

        <console name="Console" target="SYSTEM_OUT">

            <!--输出日志的格式-->

            <PatternLayout pattern="${sys:LOG_PATTERN}"/>

        </console>

        <!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->

        <RollingFile name="RollingFileInfo" fileName="${sys:LOG_PATH}/info.log"

                     filePattern="${sys:LOG_PATH}/$${date:yyyy-MM}/info-%d{yyyy-MM-dd}-%i.log.zip">

            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->

            <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>

            <PatternLayout pattern="${sys:LOG_PATTERN}"/>

            <Policies>

                <TimeBasedTriggeringPolicy/>

                <SizeBasedTriggeringPolicy size="50 MB"/>

            </Policies>

            <DefaultRolloverStrategy max="200"  compressionLevel="9"/>

        </RollingFile>

        <RollingFile name="RollingFileWarn" fileName="${sys:LOG_PATH}/warn.log"

                     filePattern="${sys:LOG_PATH}/$${date:yyyy-MM}/warn-%d{yyyy-MM-dd}-%i.log.zip">

            <ThresholdFilter level="warn" onMatch="ACCEPT" onMismatch="DENY"/>

            <PatternLayout pattern="${sys:LOG_PATTERN}"/>

            <Policies>

                <TimeBasedTriggeringPolicy/>

                <SizeBasedTriggeringPolicy size="50 MB"/>

            </Policies>

            <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件，这里设置了200 -->

            <DefaultRolloverStrategy max="200"  compressionLevel="9"/>

        </RollingFile>

        <RollingFile name="RollingFileError" fileName="${sys:LOG_PATH}/error.log"

                     filePattern="${sys:LOG_PATH}/$${date:yyyy-MM}/error-%d{yyyy-MM-dd}-%i.log.zip">

            <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>

            <PatternLayout pattern="${sys:LOG_PATTERN}"/>

            <Policies>

                <TimeBasedTriggeringPolicy/>

                <SizeBasedTriggeringPolicy size="50 MB"/>

            </Policies>

            <DefaultRolloverStrategy max="200"   compressionLevel="9"/>

        </RollingFile>
        <!---->
        <!--<Socket name="logstash" host="103.160.111.213" port="9250">-->
        <!--<PatternLayout pattern="${sys:ELK_LOG_PATTERN}"/>-->
        <!--&lt;!&ndash; <SerializedLayout/> &ndash;&gt;-->
        <!--</Socket>-->

    </appenders>


    <!--然后定义logger，只有定义了logger并引入的appender，appender才会生效-->

    <loggers>

        <logger name="org.springframework" level="WARN"></logger>
        <logger name="com.netflix" level="WARN"></logger>
        <!-- MYBATIS日志打印 -->
        <logger name="com.ots.jd.mybatis.base" level="DEBUG"></logger>
        <!-- 异步日志输出 -->
        <!--<AsyncLogger name="com" level="INFO" includeLocation="true">-->
        <!--<appender-ref ref="logstash"/>-->
        <!--</AsyncLogger>-->
        <root level="INFO">
            <appender-ref ref="Console"/>
            <appender-ref ref="RollingFileInfo"/>
            <appender-ref ref="RollingFileWarn"/>
            <appender-ref ref="RollingFileError"/>
        </root>
    </loggers>

</configuration>